services:
  # PostgreSQL база данных
  postgres:
    image: postgres:16-alpine
    container_name: banya-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-banya_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-banya_password}
      POSTGRES_DB: ${POSTGRES_DB:-banya_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-banya_user}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Telegram бот
  bot:
    build:
      context: ./telegram-bot
      dockerfile: Dockerfile
    container_name: banya-bot
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-banya_user}:${POSTGRES_PASSWORD:-banya_password}@postgres:5432/${POSTGRES_DB:-banya_db}
      BOT_TOKEN: ${BOT_TOKEN}
      TABSCANNER_API_KEY: ${TABSCANNER_API_KEY}
      WEB_APP_URL: ${WEB_APP_URL}
      WEBHOOK_URL: ${WEBHOOK_URL:-}
      WEBHOOK_PATH: ${WEBHOOK_PATH:-/webhook}
      PORT: ${BOT_PORT:-3001}
    ports:
      - "${BOT_PORT:-3001}:${BOT_PORT:-3001}"
      - "3002:3002"
      - "3003:3003"
    volumes:
      - ./telegram-bot:/app
      - /app/node_modules
      - /app/generated
      - receipt_uploads:/app/uploads
    command: sh -c "npx prisma migrate deploy && node index.js"

  # Next.js приложение
  app:
    build:
      context: ./banya-check-app
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_BOT_USERNAME: ${NEXT_PUBLIC_BOT_USERNAME}
        NEXT_PUBLIC_API_URL: ${WEB_APP_URL}
        NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
    container_name: banya-app
    restart: unless-stopped
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_BOT_USERNAME: ${NEXT_PUBLIC_BOT_USERNAME}
      NEXT_PUBLIC_API_URL: ${WEB_APP_URL}
      NEXT_PUBLIC_WS_URL: ${NEXT_PUBLIC_WS_URL}
      API_URL: http://bot:3002
    ports:
      - "3000:3000"
    depends_on:
      - bot

  # ngrok туннель
  ngrok:
    image: ngrok/ngrok:latest
    container_name: banya-ngrok
    restart: unless-stopped
    command:
      - "http"
      - "app:3000"
      - "--domain=raccoon-topical-ocelot.ngrok-free.app"
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    ports:
      - "4040:4040"
    depends_on:
      - app

volumes:
  postgres_data:
    driver: local
  receipt_uploads:
    driver: local
