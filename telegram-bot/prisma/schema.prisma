// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Участник (пользователь Telegram)
model Participant {
  id           String   @id @default(cuid())
  telegramId   BigInt   @unique
  username     String?
  firstName    String?
  lastName     String?
  avatar       String?
  color        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sessions     SessionParticipant[]
  itemSelections ItemSelection[]
}

// Поход в баню (сессия)
model Session {
  id                     String   @id @default(cuid())
  chatId                 BigInt
  adminId                BigInt
  venueName              String?
  date                   String?
  time                   String?
  status                 String   @default("draft") // draft, active, closed
  registrationMessageId  Int?     // ID сообщения с кнопками регистрации
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  participants SessionParticipant[]
  receipts     Receipt[]
  items        CheckItem[]
}

// Связь участников и походов (многие-ко-многим)
model SessionParticipant {
  id                  String   @id @default(cuid())
  sessionId           String
  participantId       String
  role                String   @default("member") // admin, member
  attendanceStatus    String   @default("going") // going (точно иду), maybe (думаю), not_going (не иду)
  hasPayment          Boolean  @default(false)
  selectionConfirmed  Boolean  @default(false)
  createdAt           DateTime @default(now())

  session       Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)
  payments      Payment[]

  @@unique([sessionId, participantId])
}

// Чек (фото чека и результат распознавания)
model Receipt {
  id          String   @id @default(cuid())
  sessionId   String
  filePath    String   // путь к сохраненному фото
  status      String   @default("processing") // processing, completed, failed
  token       String?  // токен TabScanner
  rawData     Json?    // полный ответ от TabScanner
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session     Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  items       CheckItem[]
}

// Позиция чека (расход)
model CheckItem {
  id          String   @id @default(cuid())
  sessionId   String
  receiptId   String?
  name        String
  price       Float
  quantity    Float    @default(1)
  isCommon    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  session     Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  receipt     Receipt? @relation(fields: [receiptId], references: [id], onDelete: SetNull)
  selections  ItemSelection[]
}

// Выбор позиций участниками
model ItemSelection {
  id            String   @id @default(cuid())
  checkItemId   String
  participantId String
  quantity      Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  checkItem     CheckItem    @relation(fields: [checkItemId], references: [id], onDelete: Cascade)
  participant   Participant  @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([checkItemId, participantId])
}

// Платеж участника
model Payment {
  id                    String   @id @default(cuid())
  sessionParticipantId  String
  amount                Float
  paymentProof          String?  // URL скриншота перевода
  confirmedAt           DateTime?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  sessionParticipant    SessionParticipant @relation(fields: [sessionParticipantId], references: [id], onDelete: Cascade)
}
