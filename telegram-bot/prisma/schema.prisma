// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Участник (пользователь Telegram)
model Participant {
  id           String   @id @default(cuid())
  telegramId   BigInt   @unique
  username     String?
  firstName    String?
  lastName     String?
  avatar       String?
  color        String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  sessions     SessionParticipant[]
}

// Поход в баню (сессия)
model Session {
  id           String   @id @default(cuid())
  chatId       BigInt
  adminId      BigInt
  venueName    String?
  date         String?
  time         String?
  status       String   @default("draft") // draft, active, closed
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  participants SessionParticipant[]
}

// Связь участников и походов (многие-ко-многим)
model SessionParticipant {
  id            String   @id @default(cuid())
  sessionId     String
  participantId String
  role          String   @default("member") // admin, member
  hasPayment    Boolean  @default(false)
  createdAt     DateTime @default(now())

  session       Session     @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  participant   Participant @relation(fields: [participantId], references: [id], onDelete: Cascade)

  @@unique([sessionId, participantId])
}
