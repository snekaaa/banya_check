require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const {
  getOrCreateParticipant,
  createSession,
  getSession,
  updateSession,
  addParticipantToSession,
  removeParticipantFromSession,
  getActiveSessionsForChat,
  sessionToLegacyFormat,
  updateAttendanceStatus,
  getParticipantsByStatus
} = require('./db-helpers');
const { parseSessionMessage, formatParsedSession } = require('./openai-service');
const prisma = require('./prisma-client');

const bot = new Telegraf(process.env.BOT_TOKEN);

// –ó–∞–ø—É—Å–∫–∞–µ–º API –∏ WebSocket —Å–µ—Ä–≤–µ—Ä—ã –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è –±–æ—Ç–∞
setImmediate(() => {
  require('./api-server'); // –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
  require('./websocket-server'); // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä
});

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
const userStates = new Map();

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const chatMembers = new Map();

// Web App URL (–∏–∑ .env)
const WEB_APP_URL = process.env.WEB_APP_URL;

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
 */
async function formatRegistrationMessage(sessionId) {
  const session = await getSession(sessionId);
  if (!session) return null;

  const participants = await getParticipantsByStatus(sessionId);

  let message = `üèõ ${session.venueName || '–ü–æ—Ö–æ–¥ –≤ –±–∞–Ω—é'}\n`;
  message += `üìÖ ${session.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –≤ ${session.time || '--:--'}\n\n`;

  // –¢–æ—á–Ω–æ –∏–¥—É—Ç
  if (participants.going.length > 0) {
    message += `üü¢ –¢–æ—á–Ω–æ –∏–¥—É—Ç (${participants.going.length}):\n`;
    participants.going.forEach(p => {
      const name = p.participant.firstName || p.participant.username || '–ê–Ω–æ–Ω–∏–º';
      message += `  ‚Ä¢ ${name}\n`;
    });
    message += '\n';
  }

  // –ï—â–µ –¥—É–º–∞—é—Ç
  if (participants.maybe.length > 0) {
    message += `üü° –ï—â–µ –¥—É–º–∞—é—Ç (${participants.maybe.length}):\n`;
    participants.maybe.forEach(p => {
      const name = p.participant.firstName || p.participant.username || '–ê–Ω–æ–Ω–∏–º';
      message += `  ‚Ä¢ ${name}\n`;
    });
    message += '\n';
  }

  // –ù–µ –∏–¥—É—Ç
  if (participants.notGoing.length > 0) {
    message += `üî¥ –ù–µ –∏–¥—É—Ç (${participants.notGoing.length}):\n`;
    participants.notGoing.forEach(p => {
      const name = p.participant.firstName || p.participant.username || '–ê–Ω–æ–Ω–∏–º';
      message += `  ‚Ä¢ ${name}\n`;
    });
    message += '\n';
  }

  if (participants.going.length === 0 && participants.maybe.length === 0 && participants.notGoing.length === 0) {
    message += 'üë• –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è\n\n';
  }

  message += 'üí¨ –í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∞—Ç—É—Å:';

  return message;
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø–æ—Ö–æ–¥–æ–≤ –≤ –±–∞–Ω—é.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/newbanya - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥ –≤ –±–∞–Ω—é
/help - –ø–æ–º–æ—â—å

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é (‚â°) —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`;

  await ctx.reply(welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  await ctx.reply(`–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2. –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbanya —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥
4. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —á–∞—Ç–∞
5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (‚â°) –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ë–∞–Ω—è–°—á–µ—Ç`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è FSM)
bot.on('text', async (ctx, next) => {
  const userState = userStates.get(ctx.from.id);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
  if (ctx.chat.type !== 'private' && ctx.from) {
    const chatId = ctx.chat.id;
    if (!chatMembers.has(chatId)) {
      chatMembers.set(chatId, new Map());
    }

    const members = chatMembers.get(chatId);
    members.set(ctx.from.id, {
      id: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name
    });
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
  if (userState) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏ —á–µ—Ä–µ–∑ AI (—Å–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏)
    if (userState.action === 'waiting_session_description') {
      const messageText = ctx.message.text;
      const loadingMsg = await ctx.reply('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...');

      try {
        // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
        const session = await createSession(userState.chatId, ctx.from.id);

        // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
        const result = await parseSessionMessage(messageText);

        if (!result.success) {
          await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);
          return await ctx.reply(
            `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${result.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ—Ö–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.`
          );
        }

        // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
        await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        userStates.set(ctx.from.id, {
          action: 'confirming_parsed_data',
          sessionId: session.id,
          parsedData: result.data
        });

        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
        const formattedMessage = formatParsedSession(result.data);

        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        let warningText = '';
        if (result.missingFields && result.missingFields.length > 0) {
          warningText = `\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: ${result.missingFields.join(', ')}\n`;
        }

        const keyboard = Markup.inlineKeyboard([
          [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_session_${session.id}`)],
          [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_session_${session.id}`)],
          [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
        ]);

        return await ctx.reply(
          formattedMessage + warningText + '\n‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?',
          keyboard
        );
      } catch (error) {
        console.error('Error parsing session:', error);
        await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);
        return await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
      }
    }

    // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö actions –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    if (userState.action.startsWith('editing_') || userState.action === 'confirming_parsed_data') {
      const session = await getSession(userState.sessionId);
      if (!session) {
        userStates.delete(ctx.from.id);
        return next();
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (userState.action === 'editing_venue_name') {
      userState.parsedData.venueName = ctx.message.text;
      userStates.set(ctx.from.id, {
        action: 'confirming_parsed_data',
        sessionId: userState.sessionId,
        parsedData: userState.parsedData
      });

      const formattedMessage = formatParsedSession(userState.parsedData);
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_session_${userState.sessionId}`)],
        [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_session_${userState.sessionId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]);

      return await ctx.reply(
        formattedMessage + '\n‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?',
        keyboard
      );
    }

    if (userState.action === 'editing_date') {
      userState.parsedData.date = ctx.message.text;
      userStates.set(ctx.from.id, {
        action: 'confirming_parsed_data',
        sessionId: userState.sessionId,
        parsedData: userState.parsedData
      });

      const formattedMessage = formatParsedSession(userState.parsedData);
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_session_${userState.sessionId}`)],
        [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_session_${userState.sessionId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]);

      return await ctx.reply(
        formattedMessage + '\n‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?',
        keyboard
      );
    }

    if (userState.action === 'editing_time') {
      userState.parsedData.time = ctx.message.text;
      userStates.set(ctx.from.id, {
        action: 'confirming_parsed_data',
        sessionId: userState.sessionId,
        parsedData: userState.parsedData
      });

      const formattedMessage = formatParsedSession(userState.parsedData);
      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_session_${userState.sessionId}`)],
        [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_session_${userState.sessionId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]);

      return await ctx.reply(
        formattedMessage + '\n‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?',
        keyboard
      );
    }
  }

  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /newbanya - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞ —Å AI –ø–∞—Ä—Å–∏–Ω–≥–æ–º
bot.command('newbanya', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
  if (ctx.chat.type === 'private') {
    return await ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const member = await ctx.getChatMember(ctx.from.id);
  if (!['creator', 'administrator'].includes(member.status)) {
    return await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Ö–æ–¥—ã –≤ –±–∞–Ω—é!');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏–∑ –ë–î
  const activeSessions = await getActiveSessionsForChat(ctx.chat.id);

  if (activeSessions.length > 0) {
    const sessionId = activeSessions[0].id;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const message = await formatRegistrationMessage(sessionId);

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üü¢ –¢–æ—á–Ω–æ –∏–¥—É', `status_going_${sessionId}`),
        Markup.button.callback('üü° –î—É–º–∞—é', `status_maybe_${sessionId}`)
      ],
      [
        Markup.button.callback('üî¥ –ù–µ –∏–¥—É', `status_not_going_${sessionId}`)
      ],
      [
        Markup.button.url('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ë–∞–Ω—è–°—á–µ—Ç', `https://t.me/banya_schet_bot/banya_check?startapp=${sessionId}`)
      ],
      [
        Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥', 'create_new_session')
      ]
    ]);

    return await ctx.reply(message, keyboard);
  }

  // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
  const messageText = ctx.message.text.replace('/newbanya', '').trim();

  if (!messageText) {
    return await ctx.reply(
      `üèõ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–Ω—é\n\nüí¨ –û–ø–∏—à–∏—Ç–µ –ø–æ—Ö–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n"–°–æ–±–∏—Ä–∞–µ–º—Å—è 4 –Ω–æ—è–±—Ä—è –≤ 19-00 –≤ –í–∞—Ä—à–∞–≤—Å–∫–∏–µ –±–∞–Ω–∏. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å—Ç–æ–ª –Ω–∞ 12 —á–µ–ª–æ–≤–µ–∫. –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–∞ 20 —Ç—ã—Å —Ä—É–±."\n\nüìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:`,
      Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
    );
  }

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î (–≤ —Å—Ç–∞—Ç—É—Å–µ draft)
  const session = await createSession(ctx.chat.id, ctx.from.id);

  // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  const loadingMsg = await ctx.reply('ü§ñ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ...');

  try {
    // –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é AI
    const result = await parseSessionMessage(messageText);

    if (!result.success) {
      await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);
      return await ctx.reply(
        `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: ${result.error}\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å –ø–æ—Ö–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.`
      );
    }

    // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.set(ctx.from.id, {
      action: 'confirming_parsed_data',
      sessionId: session.id,
      parsedData: result.data
    });

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
    const formattedMessage = formatParsedSession(result.data);

    // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
    let warningText = '';
    if (result.missingFields && result.missingFields.length > 0) {
      warningText = `\n‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å: ${result.missingFields.join(', ')}\n`;
    }

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_session_${session.id}`)],
      [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_session_${session.id}`)],
      [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
    ]);

    await ctx.reply(
      formattedMessage + warningText + '\n‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?',
      keyboard
    );

  } catch (error) {
    console.error('Error parsing session:', error);
    await ctx.telegram.deleteMessage(ctx.chat.id, loadingMsg.message_id);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
bot.action(/status_(going|maybe|not_going)_(.+)/, async (ctx) => {
  const status = ctx.match[1];
  const sessionId = ctx.match[2];

  try {
    const session = await getSession(sessionId);
    if (!session) {
      return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const participant = await getOrCreateParticipant({
      id: ctx.from.id,
      username: ctx.from.username,
      first_name: ctx.from.first_name,
      last_name: ctx.from.last_name
    }, bot);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–∞—Å—Ç–∏—è
    await updateAttendanceStatus(sessionId, ctx.from.id, status);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const updatedMessage = await formatRegistrationMessage(sessionId);

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üü¢ –¢–æ—á–Ω–æ –∏–¥—É', `status_going_${sessionId}`),
        Markup.button.callback('üü° –î—É–º–∞—é', `status_maybe_${sessionId}`)
      ],
      [
        Markup.button.callback('üî¥ –ù–µ –∏–¥—É', `status_not_going_${sessionId}`)
      ],
      [
        Markup.button.url('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ë–∞–Ω—è–°—á–µ—Ç', `https://t.me/banya_schet_bot/banya_check?startapp=${sessionId}`)
      ]
    ]);

    await ctx.editMessageText(updatedMessage, keyboard);

    const statusText = {
      'going': '‚úÖ –í—ã –≤ —Å–ø–∏—Å–∫–µ!',
      'maybe': 'üü° –í—ã –≤ —Ä–∞–∑–¥—É–º—å—è—Ö',
      'not_going': '‚ùå –í—ã –Ω–µ –∏–¥–µ—Ç–µ'
    };

    await ctx.answerCbQuery(statusText[status] || '‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω');
  } catch (error) {
    console.error('Error updating attendance status:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–π AI —Å–µ—Å—Å–∏–∏
bot.action(/confirm_session_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const userState = userStates.get(ctx.from.id);

  if (!userState || userState.action !== 'confirming_parsed_data' || userState.sessionId !== sessionId) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞');
  }

  try {
    const session = await getSession(sessionId);
    if (!session) {
      userStates.delete(ctx.from.id);
      return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    const parsedData = userState.parsedData;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –¥–∞–Ω–Ω—ã–º–∏
    await updateSession(sessionId, {
      venueName: parsedData.venueName || '–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ —É–∫–∞–∑–∞–Ω–æ',
      date: parsedData.date || null,
      time: parsedData.time || null,
      status: 'active' // –°—Ä–∞–∑—É –¥–µ–ª–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–π
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã
    if (parsedData.commonExpenses && parsedData.commonExpenses.length > 0) {
      for (const expense of parsedData.commonExpenses) {
        await prisma.checkItem.create({
          data: {
            sessionId: sessionId,
            name: expense.name,
            price: expense.price,
            quantity: 1,
            isCommon: true,
          }
        });
      }
    }

    // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    userStates.delete(ctx.from.id);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.deleteMessage();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π –≤ –≥—Ä—É–ø–ø—É
    const chatId = Number(session.chatId);
    const registrationMessage = await formatRegistrationMessage(sessionId);

    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('üü¢ –¢–æ—á–Ω–æ –∏–¥—É', `status_going_${sessionId}`),
        Markup.button.callback('üü° –î—É–º–∞—é', `status_maybe_${sessionId}`)
      ],
      [
        Markup.button.callback('üî¥ –ù–µ –∏–¥—É', `status_not_going_${sessionId}`)
      ],
      [
        Markup.button.url('üöÄ –û—Ç–∫—Ä—ã—Ç—å –ë–∞–Ω—è–°—á–µ—Ç', `https://t.me/banya_schet_bot/banya_check?startapp=${sessionId}`)
      ]
    ]);

    const sentMessage = await bot.telegram.sendMessage(chatId, registrationMessage, keyboard);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await updateSession(sessionId, {
      registrationMessageId: sentMessage.message_id
    });

    await ctx.answerCbQuery('‚úÖ –ü–æ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω! –£—á–∞—Å—Ç–Ω–∏–∫–∏ –º–æ–≥—É—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.');

  } catch (error) {
    console.error('Error confirming session:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
bot.action(/edit_session_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const userState = userStates.get(ctx.from.id);

  if (!userState || userState.action !== 'confirming_parsed_data' || userState.sessionId !== sessionId) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞');
  }

  const parsedData = userState.parsedData;

  // –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  const buttons = [];

  if (!parsedData.venueName) {
    buttons.push([Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∏', `edit_venue_${sessionId}`)]);
  } else {
    buttons.push([Markup.button.callback(`‚úèÔ∏è –ù–∞–∑–≤–∞–Ω–∏–µ: ${parsedData.venueName}`, `edit_venue_${sessionId}`)]);
  }

  if (!parsedData.date) {
    buttons.push([Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –¥–∞—Ç—É', `edit_date_${sessionId}`)]);
  } else {
    buttons.push([Markup.button.callback(`‚úèÔ∏è –î–∞—Ç–∞: ${parsedData.date}`, `edit_date_${sessionId}`)]);
  }

  if (!parsedData.time) {
    buttons.push([Markup.button.callback('üìù –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è', `edit_time_${sessionId}`)]);
  } else {
    buttons.push([Markup.button.callback(`‚úèÔ∏è –í—Ä–µ–º—è: ${parsedData.time}`, `edit_time_${sessionId}`)]);
  }

  buttons.push([Markup.button.callback('‚óÄÔ∏è –ù–∞–∑–∞–¥', `back_to_confirm_${sessionId}`)]);

  const keyboard = Markup.inlineKeyboard(buttons);

  await ctx.editMessageText(
    '‚úèÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:',
    keyboard
  );
  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
bot.action(/edit_venue_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const userState = userStates.get(ctx.from.id);

  if (!userState || userState.sessionId !== sessionId) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  userStates.set(ctx.from.id, {
    action: 'editing_venue_name',
    sessionId: sessionId,
    parsedData: userState.parsedData
  });

  await ctx.editMessageText(
    'üìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∏:',
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
  );
  await ctx.answerCbQuery();
});

bot.action(/edit_date_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const userState = userStates.get(ctx.from.id);

  if (!userState || userState.sessionId !== sessionId) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  userStates.set(ctx.from.id, {
    action: 'editing_date',
    sessionId: sessionId,
    parsedData: userState.parsedData
  });

  await ctx.editMessageText(
    'üìÖ –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "04.11.2025" –∏–ª–∏ "4 –Ω–æ—è–±—Ä—è"):',
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
  );
  await ctx.answerCbQuery();
});

bot.action(/edit_time_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const userState = userStates.get(ctx.from.id);

  if (!userState || userState.sessionId !== sessionId) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  userStates.set(ctx.from.id, {
    action: 'editing_time',
    sessionId: sessionId,
    parsedData: userState.parsedData
  });

  await ctx.editMessageText(
    'üïê –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "19:00"):',
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
  );
  await ctx.answerCbQuery();
});

bot.action(/back_to_confirm_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const userState = userStates.get(ctx.from.id);

  if (!userState || userState.sessionId !== sessionId) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  userStates.set(ctx.from.id, {
    action: 'confirming_parsed_data',
    sessionId: sessionId,
    parsedData: userState.parsedData
  });

  const formattedMessage = formatParsedSession(userState.parsedData);
  const keyboard = Markup.inlineKeyboard([
    [Markup.button.callback('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', `confirm_session_${sessionId}`)],
    [Markup.button.callback('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', `edit_session_${sessionId}`)],
    [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
  ]);

  await ctx.editMessageText(
    formattedMessage + '\n‚ùì –í—Å—ë –≤–µ—Ä–Ω–æ?',
    keyboard
  );
  await ctx.answerCbQuery();
});


// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥"
bot.action('create_new_session', async (ctx) => {
  await ctx.editMessageText(
    `üèõ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–Ω—é\n\nüí¨ –û–ø–∏—à–∏—Ç–µ –ø–æ—Ö–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n"–°–æ–±–∏—Ä–∞–µ–º—Å—è 4 –Ω–æ—è–±—Ä—è –≤ 19-00 –≤ –í–∞—Ä—à–∞–≤—Å–∫–∏–µ –±–∞–Ω–∏. –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω —Å—Ç–æ–ª –Ω–∞ 12 —á–µ–ª–æ–≤–µ–∫. –°—Ç–æ–∏–º–æ—Å—Ç—å —Å—Ç–æ–ª–∞ 20 —Ç—ã—Å —Ä—É–±."\n\nüìù –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:`,
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
  );

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
  userStates.set(ctx.from.id, {
    action: 'waiting_session_description',
    chatId: ctx.chat.id
  });

  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
bot.action('cancel', async (ctx) => {
  await ctx.deleteMessage();
  await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action('back', async (ctx) => {
  await ctx.answerCbQuery('–ù–∞–∑–∞–¥');
  await ctx.editMessageText('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbanya –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
bot.action('finish', async (ctx) => {
  await ctx.answerCbQuery('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!');
  await ctx.editMessageText('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbanya –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
(async () => {
  try {
    await bot.telegram.setChatMenuButton({
      menuButton: {
        type: 'web_app',
        text: '–ë–∞–Ω—è–°—á–µ—Ç',
        web_app: { url: WEB_APP_URL }
      }
    });
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log(`üì± Web App URL: ${WEB_APP_URL}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', error);
  }

  // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ (–Ω–µ –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, —Ç.–∫. —ç—Ç–æ long polling)
  bot.launch();
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long polling!');
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');
})().catch((error) => {
  console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  process.exit(1);
});

// Graceful stop
process.once('SIGINT', () => {
  console.log('\nüëã –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('\nüëã –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});
