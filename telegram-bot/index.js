require('dotenv').config();
const { Telegraf, Markup } = require('telegraf');
const {
  getOrCreateParticipant,
  createSession,
  getSession,
  updateSession,
  addParticipantToSession,
  removeParticipantFromSession,
  getActiveSessionsForChat,
  sessionToLegacyFormat
} = require('./db-helpers');
require('./api-server'); // –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä
require('./websocket-server'); // –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä

const bot = new Telegraf(process.env.BOT_TOKEN);

// –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
const userStates = new Map();

// –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞ (–ø–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
const chatMembers = new Map();

// Web App URL (–∏–∑ .env)
const WEB_APP_URL = process.env.WEB_APP_URL;

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  const welcomeMessage = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É—á–µ—Ç–∞ –ø–æ—Ö–æ–¥–æ–≤ –≤ –±–∞–Ω—é.

–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/newbanya - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥ –≤ –±–∞–Ω—é
/help - –ø–æ–º–æ—â—å

üí° –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é (‚â°) —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ`;

  await ctx.reply(welcomeMessage);
});

// –ö–æ–º–∞–Ω–¥–∞ /help
bot.command('help', async (ctx) => {
  await ctx.reply(`–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:

1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç
2. –î–∞–π—Ç–µ –º–Ω–µ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbanya —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥
4. –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —á–∞—Ç–∞
5. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –º–µ–Ω—é (‚â°) –∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ë–∞–Ω—è–°—á–µ—Ç`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è FSM)
bot.on('text', async (ctx, next) => {
  const userState = userStates.get(ctx.from.id);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞
  if (ctx.chat.type !== 'private' && ctx.from) {
    const chatId = ctx.chat.id;
    if (!chatMembers.has(chatId)) {
      chatMembers.set(chatId, new Map());
    }

    const members = chatMembers.get(chatId);
    members.set(ctx.from.id, {
      id: ctx.from.id,
      username: ctx.from.username,
      firstName: ctx.from.first_name,
      lastName: ctx.from.last_name
    });
  }

  // –ï—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
  if (userState) {
    const session = await getSession(userState.sessionId);

    if (!session) {
      userStates.delete(ctx.from.id);
      return next();
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∏
    if (userState.action === 'waiting_venue_name') {
      await updateSession(session.id, { venueName: ctx.message.text });
      userStates.set(ctx.from.id, {
        action: 'waiting_date',
        sessionId: userState.sessionId
      });

      return await ctx.reply(
        `‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: ${ctx.message.text}\n\nüìÖ –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: "16 –æ–∫—Ç—è–±—Ä—è" –∏–ª–∏ "16.10.2025"):`,
        Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã
    if (userState.action === 'waiting_date') {
      await updateSession(session.id, { date: ctx.message.text });
      userStates.set(ctx.from.id, {
        action: 'waiting_time',
        sessionId: userState.sessionId
      });

      return await ctx.reply(
        `‚úÖ –î–∞—Ç–∞: ${ctx.message.text}\n\nüïê –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "18:00"):`,
        Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
      );
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    if (userState.action === 'waiting_time') {
      await updateSession(session.id, { time: ctx.message.text });
      userStates.delete(ctx.from.id);

      const keyboard = Markup.inlineKeyboard([
        [Markup.button.callback('üë• –í—ã–±—Ä–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', `select_participants_${session.id}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]
      ]);

      const updatedSession = await getSession(session.id);
      const sessionData = sessionToLegacyFormat(updatedSession);

      return await ctx.reply(
        `‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Ö–æ–¥–µ:\n\nüèõ ${sessionData.venueName}\nüìÖ ${sessionData.date}\nüïê ${sessionData.time}\n\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:`,
        keyboard
      );
    }
  }

  return next();
});

// –ö–æ–º–∞–Ω–¥–∞ /newbanya - —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞
bot.command('newbanya', async (ctx) => {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –≤ –≥—Ä—É–ø–ø–µ
  if (ctx.chat.type === 'private') {
    return await ctx.reply('‚ùå –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ!');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  const member = await ctx.getChatMember(ctx.from.id);
  if (!['creator', 'administrator'].includes(member.status)) {
    return await ctx.reply('‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ø–æ—Ö–æ–¥—ã –≤ –±–∞–Ω—é!');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Ö–æ–¥—ã –∏–∑ –ë–î
  const activeSessions = await getActiveSessionsForChat(ctx.chat.id);

  if (activeSessions.length > 0) {
    const session = sessionToLegacyFormat(activeSessions[0]);
    const participantNames = session.participants.map(p => p.firstName || p.username).join(', ');

    const keyboard = Markup.inlineKeyboard([
      [Markup.button.callback('‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥', 'create_new_session')]
    ]);

    return await ctx.reply(
      `‚ÑπÔ∏è –ï—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ—Ö–æ–¥:\n\nüèõ ${session.venueName || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}\nüìÖ ${session.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'} –≤ ${session.time || '--:--'}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏: ${participantNames || '–Ω–µ –≤—ã–±—Ä–∞–Ω—ã'}\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é (‚â°) —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–∞–Ω—è–°—á–µ—Ç`,
      keyboard
    );
  }

  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
  const session = await createSession(ctx.chat.id, ctx.from.id);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∏
  userStates.set(ctx.from.id, {
    action: 'waiting_venue_name',
    sessionId: session.id
  });

  await ctx.reply(
    `üèõ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–Ω—é\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ñ–∞—Ä –ø—Ç–∏—Ü–∞"):`,
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
  );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
bot.action(/select_participants_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const session = await getSession(sessionId);

  if (!session) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  try {
    const chatId = Number(session.chatId);
    const members = chatMembers.get(chatId) || new Map();

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —á–µ–∫–±–æ–∫—Å–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    const memberButtons = [];
    const membersArray = Array.from(members.values());

    if (membersArray.length === 0) {
      await ctx.answerCbQuery('‚ùå –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å –≤ —á–∞—Ç, —á—Ç–æ–±—ã –±–æ—Ç –∑–∞–ø–æ–º–Ω–∏–ª –≤–∞—Å!');
      return;
    }

    const sessionData = sessionToLegacyFormat(session);

    // –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for (let i = 0; i < membersArray.length; i += 2) {
      const row = [];

      for (let j = 0; j < 2 && i + j < membersArray.length; j++) {
        const member = membersArray[i + j];
        const isSelected = sessionData.participants.some(p => p.id === member.id);
        const checkbox = isSelected ? '‚úÖ' : '‚òê';
        const name = member.firstName || member.username || 'User';

        row.push({
          text: `${checkbox} ${name}`,
          callback_data: `toggle_participant_${sessionId}_${member.id}`
        });
      }

      memberButtons.push(row);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ì–æ—Ç–æ–≤–æ"
    memberButtons.push([
      { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `finish_selection_${sessionId}` }
    ]);

    await ctx.editMessageText(
      `üë• –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n–í—ã–±—Ä–∞–Ω–æ: ${sessionData.participants.length}`,
      {
        reply_markup: {
          inline_keyboard: memberButtons
        }
      }
    );

    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ toggle —É—á–∞—Å—Ç–Ω–∏–∫–∞
bot.action(/toggle_participant_(.+)_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const memberId = parseInt(ctx.match[2]);
  const session = await getSession(sessionId);

  if (!session) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  try {
    const chatId = Number(session.chatId);
    const members = chatMembers.get(chatId) || new Map();
    const member = members.get(memberId);

    if (!member) {
      return await ctx.answerCbQuery('‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –ë–î
    const participant = await getOrCreateParticipant({
      id: member.id,
      username: member.username,
      first_name: member.firstName,
      last_name: member.lastName
    }, bot);

    const sessionData = sessionToLegacyFormat(session);
    const isSelected = sessionData.participants.some(p => p.id === memberId);

    if (isSelected) {
      // –£–±–∏—Ä–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
      await removeParticipantFromSession(sessionId, participant.id);
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
      await addParticipantToSession(sessionId, participant.id, 'member');
    }

    // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    const updatedSession = await getSession(sessionId);
    const updatedSessionData = sessionToLegacyFormat(updatedSession);

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    const memberButtons = [];
    const membersArray = Array.from(members.values());

    for (let i = 0; i < membersArray.length; i += 2) {
      const row = [];

      for (let j = 0; j < 2 && i + j < membersArray.length; j++) {
        const m = membersArray[i + j];
        const isSelectedNow = updatedSessionData.participants.some(p => p.id === m.id);
        const checkbox = isSelectedNow ? '‚úÖ' : '‚òê';
        const name = m.firstName || m.username || 'User';

        row.push({
          text: `${checkbox} ${name}`,
          callback_data: `toggle_participant_${sessionId}_${m.id}`
        });
      }

      memberButtons.push(row);
    }

    memberButtons.push([
      { text: '‚úÖ –ì–æ—Ç–æ–≤–æ', callback_data: `finish_selection_${sessionId}` }
    ]);

    await ctx.editMessageText(
      `üë• –í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:\n\n–í—ã–±—Ä–∞–Ω–æ: ${updatedSessionData.participants.length}`,
      {
        reply_markup: {
          inline_keyboard: memberButtons
        }
      }
    );

    await ctx.answerCbQuery();
  } catch (error) {
    console.error('Error:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ" –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
bot.action(/finish_selection_(.+)/, async (ctx) => {
  const sessionId = ctx.match[1];
  const session = await getSession(sessionId);

  if (!session) {
    return await ctx.answerCbQuery('‚ùå –°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
  }

  const sessionData = sessionToLegacyFormat(session);

  if (sessionData.participants.length === 0) {
    return await ctx.answerCbQuery('‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞!');
  }

  try {
    // –ú–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ active
    await updateSession(sessionId, { status: 'active' });

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await ctx.deleteMessage();

    const participantNames = sessionData.participants.map(p => p.firstName || p.username).join(', ');

    // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    await ctx.reply(
      `‚úÖ –ü–æ—Ö–æ–¥ —Å–æ–∑–¥–∞–Ω!\n\nüèõ ${sessionData.venueName}\nüìÖ ${sessionData.date} –≤ ${sessionData.time}\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ (${sessionData.participants.length}): ${participantNames}\n\nüí° –û—Ç–∫—Ä–æ–π—Ç–µ –º–µ–Ω—é (‚â°) —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å –ë–∞–Ω—è–°—á–µ—Ç`
    );

    await ctx.answerCbQuery('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
  } catch (error) {
    console.error('Error:', error);
    await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ö–æ–¥"
bot.action('create_new_session', async (ctx) => {
  // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –≤ –ë–î
  const session = await createSession(ctx.chat.id, ctx.from.id);

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –±–∞–Ω–∏
  userStates.set(ctx.from.id, {
    action: 'waiting_venue_name',
    sessionId: session.id
  });

  await ctx.editMessageText(
    `üèõ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–Ω—é\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ñ–∞—Ä –ø—Ç–∏—Ü–∞"):`,
    Markup.inlineKeyboard([[Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', 'cancel')]])
  );

  await ctx.answerCbQuery();
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –æ—Ç–º–µ–Ω—ã
bot.action('cancel', async (ctx) => {
  await ctx.deleteMessage();
  await ctx.answerCbQuery('–û—Ç–º–µ–Ω–µ–Ω–æ');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
bot.action('back', async (ctx) => {
  await ctx.answerCbQuery('–ù–∞–∑–∞–¥');
  await ctx.editMessageText('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbanya –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ì–æ—Ç–æ–≤–æ"
bot.action('finish', async (ctx) => {
  await ctx.answerCbQuery('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞!');
  await ctx.editMessageText('‚úÖ –°–µ—Å—Å–∏—è —Å–æ–∑–¥–∞–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /newbanya –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ö–æ–¥–∞');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
  console.error(`Error for ${ctx.updateType}:`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.launch().then(async () => {
  console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!');
  console.log('–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏');

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –º–µ–Ω—é —Å Web App
  try {
    await bot.telegram.setChatMenuButton({
      menuButton: {
        type: 'web_app',
        text: '–ë–∞–Ω—è–°—á–µ—Ç',
        web_app: { url: WEB_APP_URL }
      }
    });
    console.log('‚úÖ –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
    console.log(`üì± Web App URL: ${WEB_APP_URL}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é:', error);
  }
});

// Graceful stop
process.once('SIGINT', () => {
  console.log('\nüëã –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGINT');
});
process.once('SIGTERM', () => {
  console.log('\nüëã –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...');
  bot.stop('SIGTERM');
});
