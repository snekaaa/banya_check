const OpenAI = require('openai');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

/**
 * –ü–∞—Ä—Å–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ö–æ–¥–∞ –≤ –±–∞–Ω—é —Å –ø–æ–º–æ—â—å—é OpenAI Structured Outputs
 * @param {string} text - –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @returns {Promise<{success: boolean, data?: Object, error?: string, missingFields?: string[]}>}
 */
async function parseSessionMessage(text) {
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-4o-mini',
      messages: [
        {
          role: 'system',
          content: `–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø–æ—Ö–æ–¥–∞—Ö –≤ –±–∞–Ω—é. –ò–∑–≤–ª–µ–∫–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–∑–≤–∞–Ω–∏–∏ –±–∞–Ω–∏, –¥–∞—Ç–µ, –≤—Ä–µ–º–µ–Ω–∏ –∏ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–∞—Ö.

–ü—Ä–∞–≤–∏–ª–∞:
- –î–∞—Ç—É –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–π –≤ —Ñ–æ—Ä–º–∞—Ç DD.MM.YYYY (–Ω–∞–ø—Ä–∏–º–µ—Ä, "4 –Ω–æ—è–±—Ä—è" ‚Üí "04.11.2025")
- –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–≤ 19-00" ‚Üí "19:00")
- –ï—Å–ª–∏ –≥–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–µ–∫—É—â–∏–π –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π (–µ—Å–ª–∏ –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ—à–µ–ª)
- –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –¥–æ–ª–∂–Ω—ã –≤–∫–ª—é—á–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–∞, –æ—Å—Ç–∞–≤—å –ø–æ–ª–µ –ø—É—Å—Ç—ã–º –∏–ª–∏ null
- –û–±—Ä–∞—â–∞–π –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç: "—Å—Ç–æ–ª –Ω–∞ X —á–µ–ª–æ–≤–µ–∫ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é Y" ‚Üí –æ–±—â–∏–π —Ä–∞—Å—Ö–æ–¥ "–ë—Ä–æ–Ω—å —Å—Ç–æ–ª–∞"`
        },
        {
          role: 'user',
          content: text
        }
      ],
      response_format: {
        type: 'json_schema',
        json_schema: {
          name: 'session_info',
          strict: true,
          schema: {
            type: 'object',
            properties: {
              venueName: {
                type: ['string', 'null'],
                description: '–ù–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∏ –∏–ª–∏ –º–µ—Å—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è'
              },
              date: {
                type: ['string', 'null'],
                description: '–î–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM.YYYY'
              },
              time: {
                type: ['string', 'null'],
                description: '–í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM'
              },
              commonExpenses: {
                type: 'array',
                description: '–°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤',
                items: {
                  type: 'object',
                  properties: {
                    name: {
                      type: 'string',
                      description: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞'
                    },
                    price: {
                      type: 'number',
                      description: '–¶–µ–Ω–∞ –≤ —Ä—É–±–ª—è—Ö'
                    }
                  },
                  required: ['name', 'price'],
                  additionalProperties: false
                }
              },
              confidence: {
                type: 'string',
                enum: ['high', 'medium', 'low'],
                description: '–£—Ä–æ–≤–µ–Ω—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –≤ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏'
              }
            },
            required: ['venueName', 'date', 'time', 'commonExpenses', 'confidence'],
            additionalProperties: false
          }
        }
      },
      temperature: 0.3,
    });

    const result = JSON.parse(completion.choices[0].message.content);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    const missingFields = [];
    if (!result.venueName) missingFields.push('–Ω–∞–∑–≤–∞–Ω–∏–µ –±–∞–Ω–∏');
    if (!result.date) missingFields.push('–¥–∞—Ç–∞');
    if (!result.time) missingFields.push('–≤—Ä–µ–º—è');

    return {
      success: true,
      data: result,
      missingFields: missingFields.length > 0 ? missingFields : null
    };

  } catch (error) {
    console.error('OpenAI parsing error:', error);
    return {
      success: false,
      error: error.message || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é'
    };
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
function formatParsedSession(data) {
  let message = 'ü§ñ –í–æ—Ç —á—Ç–æ —è –ø–æ–Ω—è–ª:\n\n';

  message += `üèõ –ë–∞–Ω—è: ${data.venueName || '‚ùì –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `üìÖ –î–∞—Ç–∞: ${data.date || '‚ùì –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
  message += `üïê –í—Ä–µ–º—è: ${data.time || '‚ùì –Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;

  if (data.commonExpenses && data.commonExpenses.length > 0) {
    message += '\nüí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:\n';
    data.commonExpenses.forEach((expense, index) => {
      message += `  ${index + 1}. ${expense.name} ‚Äî ${expense.price.toLocaleString('ru-RU')} ‚ÇΩ\n`;
    });
  } else {
    message += '\nüí∞ –û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: –Ω–µ—Ç\n';
  }

  return message;
}

module.exports = {
  parseSessionMessage,
  formatParsedSession
};
