const FormData = require('form-data');
const fs = require('fs');
const path = require('path');
const https = require('https');

const TABSCANNER_API_KEY = process.env.TABSCANNER_API_KEY;
const TABSCANNER_BASE_URL = 'https://api.tabscanner.com';

/**
 * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–æ—Ç–æ —á–µ–∫–∞ –≤ TabScanner –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
 * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {Promise<{token: string, duplicate: boolean}>}
 */
async function uploadReceiptToTabScanner(filePath) {
  if (!TABSCANNER_API_KEY) {
    throw new Error('TABSCANNER_API_KEY is not set in environment variables');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(filePath)) {
    throw new Error(`File not found: ${filePath}`);
  }

  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
  const fileStats = fs.statSync(filePath);
  const fileName = path.basename(filePath);

  console.log(`üì§ Uploading file to TabScanner: ${fileName} (${fileStats.size} bytes)`);

  return new Promise((resolve, reject) => {
    const formData = new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ form-data
    formData.append('file', fs.createReadStream(filePath));

    // –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    formData.append('documentType', 'receipt');

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏—Å–ø–æ–ª—å–∑—É—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ form.submit()
    formData.submit({
      host: 'api.tabscanner.com',
      path: '/api/2/process',
      protocol: 'https:',
      headers: {
        'apikey': TABSCANNER_API_KEY
      }
    }, (err, res) => {
      if (err) {
        console.error('‚ùå Error uploading to TabScanner:', err.message);
        reject(err);
        return;
      }

      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        console.log('üì• TabScanner response status:', res.statusCode);
        console.log('üì• TabScanner response:', body);

        try {
          const data = JSON.parse(body);

          if (res.statusCode !== 200) {
            reject(new Error(`TabScanner API error (${res.statusCode}): ${data.message || body}`));
            return;
          }

          if (data.status !== 'success') {
            reject(new Error(`TabScanner processing failed: ${data.message || data.status || 'Unknown error'}`));
            return;
          }

          console.log('‚úÖ TabScanner upload successful, token:', data.token);

          resolve({
            token: data.token,
            duplicate: data.duplicate || false,
          });
        } catch (error) {
          reject(new Error(`Failed to parse TabScanner response: ${body}`));
        }
      });

      res.on('error', (error) => {
        console.error('‚ùå Response error:', error.message);
        reject(error);
      });
    });
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —á–µ–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
 * @param {string} token - —Ç–æ–∫–µ–Ω –æ—Ç TabScanner
 * @returns {Promise<Object>} - —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
 */
async function getReceiptResult(token) {
  if (!TABSCANNER_API_KEY) {
    throw new Error('TABSCANNER_API_KEY is not set in environment variables');
  }

  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'api.tabscanner.com',
      path: `/api/result/${token}`,
      method: 'GET',
      headers: {
        'apikey': TABSCANNER_API_KEY,
      }
    };

    const req = https.request(options, (res) => {
      let body = '';

      res.on('data', chunk => body += chunk);

      res.on('end', () => {
        try {
          const data = JSON.parse(body);

          if (res.statusCode !== 200) {
            reject(new Error(`TabScanner API error (${res.statusCode}): ${data.message || body}`));
            return;
          }

          // –ï—Å–ª–∏ –µ—â–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
          if (data.status === 'processing') {
            resolve({ status: 'processing' });
            return;
          }

          // –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          // API –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å status: 'success' –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º–µ—Ç—å –ø–æ–ª–µ result
          if (data.status === 'success' || data.result) {
            resolve(data.result || data);
            return;
          }

          // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ success –∏ –Ω–µ—Ç result - —ç—Ç–æ –æ—à–∏–±–∫–∞
          reject(new Error(`TabScanner result failed: ${data.message || data.status || 'Unknown error'}`));
        } catch (error) {
          reject(new Error(`Failed to parse TabScanner response: ${body}`));
        }
      });
    });

    req.on('error', (error) => {
      console.error('Error fetching TabScanner result:', error);
      reject(error);
    });

    req.end();
  });
}

/**
 * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç lineItems –∏–∑ TabScanner –≤ —Ñ–æ—Ä–º–∞—Ç CheckItem
 * @param {Array} lineItems - –º–∞—Å—Å–∏–≤ –ø–æ–∑–∏—Ü–∏–π –∏–∑ TabScanner
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ CheckItem
 */
function parseLineItemsToCheckItems(lineItems) {
  if (!lineItems || !Array.isArray(lineItems)) {
    return [];
  }

  return lineItems
    .filter(item => {
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ (Total, SubTotal, Tax –∏ —Ç.–¥.)
      return !item.lineType || item.lineType === 'Product';
    })
    .map(item => {
      const name = item.descClean || item.desc || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è';
      const quantity = item.qty || 1;
      const lineTotal = item.lineTotal || 0;
      const price = item.price || (lineTotal / quantity);

      return {
        name: name.trim(),
        price: Math.max(0, price), // –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π
        quantity: Math.max(1, quantity), // –º–∏–Ω–∏–º—É–º 1
        isCommon: false, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –æ–±—â–∞—è –ø–æ–∑–∏—Ü–∏—è
      };
    })
    .filter(item => item.price > 0); // —É–±–∏—Ä–∞–µ–º –ø–æ–∑–∏—Ü–∏–∏ —Å –Ω—É–ª–µ–≤–æ–π —Ü–µ–Ω–æ–π
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫—Ä–µ–¥–∏—Ç—ã –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–µ TabScanner
 * @returns {Promise<number>} - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–µ–¥–∏—Ç–æ–≤
 */
async function getCredits() {
  if (!TABSCANNER_API_KEY) {
    throw new Error('TABSCANNER_API_KEY is not set in environment variables');
  }

  try {
    const response = await fetch(`${TABSCANNER_BASE_URL}/credit`, {
      method: 'GET',
      headers: {
        'apikey': TABSCANNER_API_KEY,
      },
    });

    if (!response.ok) {
      throw new Error('Failed to fetch credits');
    }

    const credits = await response.json();
    return credits;
  } catch (error) {
    console.error('Error fetching TabScanner credits:', error);
    throw error;
  }
}

module.exports = {
  uploadReceiptToTabScanner,
  getReceiptResult,
  parseLineItemsToCheckItems,
  getCredits,
};
