const WebSocket = require('ws');

const WS_PORT = 3003;

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: sessionId -> Set of WebSocket clients
const sessionRooms = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: client -> {userId, sessionId}
const clientInfo = new WeakMap();

const wss = new WebSocket.Server({ port: WS_PORT });

wss.on('connection', (ws) => {
  console.log('üîå –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

  ws.on('message', (message) => {
    try {
      const data = JSON.parse(message);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "join" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏
      if (data.type === 'join' && data.sessionId && data.userId) {
        const { sessionId, userId, userName, userAvatar, userColor } = data;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        clientInfo.set(ws, { sessionId, userId, userName, userAvatar, userColor });

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É —Å–µ—Å—Å–∏–∏
        if (!sessionRooms.has(sessionId)) {
          sessionRooms.set(sessionId, new Set());
        }
        sessionRooms.get(sessionId).add(ws);

        console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${sessionId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        broadcastToSession(sessionId, {
          type: 'user_joined',
          userId,
          userName,
          userAvatar,
          userColor,
        }, ws); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const onlineUsers = getOnlineUsersInSession(sessionId);
        ws.send(JSON.stringify({
          type: 'online_users',
          users: onlineUsers,
        }));
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "ping" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      if (data.type === 'ping') {
        ws.send(JSON.stringify({ type: 'pong' }));
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
    }
  });

  ws.on('close', () => {
    const info = clientInfo.get(ws);
    if (info) {
      const { sessionId, userId, userName } = info;
      console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ ${sessionId}`);

      // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      if (sessionRooms.has(sessionId)) {
        sessionRooms.get(sessionId).delete(ws);

        // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
        if (sessionRooms.get(sessionId).size === 0) {
          sessionRooms.delete(sessionId);
        }
      }

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
      broadcastToSession(sessionId, {
        type: 'user_left',
        userId,
        userName,
      });
    }
  });

  ws.on('error', (error) => {
    console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
  });
});

/**
 * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ —Å–µ—Å—Å–∏–∏
 */
function broadcastToSession(sessionId, message, excludeClient = null) {
  if (!sessionRooms.has(sessionId)) return;

  const clients = sessionRooms.get(sessionId);
  const messageStr = JSON.stringify(message);

  clients.forEach((client) => {
    if (client !== excludeClient && client.readyState === WebSocket.OPEN) {
      client.send(messageStr);
    }
  });
}

/**
 * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏
 */
function getOnlineUsersInSession(sessionId) {
  if (!sessionRooms.has(sessionId)) return [];

  const clients = sessionRooms.get(sessionId);
  const users = [];

  clients.forEach((client) => {
    const info = clientInfo.get(client);
    if (info) {
      users.push({
        userId: info.userId,
        userName: info.userName,
        userAvatar: info.userAvatar,
        userColor: info.userColor,
      });
    }
  });

  return users;
}

console.log(`üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${WS_PORT}`);

module.exports = wss;
