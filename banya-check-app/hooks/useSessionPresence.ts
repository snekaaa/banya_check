'use client';

import { useEffect, useState, useCallback, useRef } from 'react';

interface OnlineUser {
  userId: number;
  userName: string;
  userAvatar: string;
  userColor: string;
}

interface UseSessionPresenceProps {
  sessionId: string | null;
  userId: number | null;
  userName: string | null;
  userAvatar: string | null;
  userColor: string | null;
}

type ConnectionStatus = 'disconnected' | 'connecting' | 'connected' | 'reconnecting';

export function useSessionPresence({
  sessionId,
  userId,
  userName,
  userAvatar,
  userColor,
}: UseSessionPresenceProps) {
  const [onlineUsers, setOnlineUsers] = useState<OnlineUser[]>([]);
  const [connectionStatus, setConnectionStatus] = useState<ConnectionStatus>('disconnected');
  const wsRef = useRef<WebSocket | null>(null);
  const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const reconnectAttemptsRef = useRef(0);
  const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);
  const isIntentionalCloseRef = useRef(false);

  // –í—ã—á–∏—Å–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º backoff
  const getReconnectDelay = (attempt: number): number => {
    // –ó–∞–¥–µ—Ä–∂–∫–∏: 1s, 2s, 4s, 8s, 16s, 30s (max)
    const baseDelay = 1000;
    const maxDelay = 30000;
    const delay = Math.min(baseDelay * Math.pow(2, attempt), maxDelay);
    return delay;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ ping-–∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
  const startPingInterval = useCallback(() => {
    // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –µ—Å–ª–∏ –µ—Å—Ç—å
    if (pingIntervalRef.current) {
      clearInterval(pingIntervalRef.current);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    pingIntervalRef.current = setInterval(() => {
      if (wsRef.current?.readyState === WebSocket.OPEN) {
        try {
          wsRef.current.send(JSON.stringify({ type: 'ping' }));
        } catch (error) {
          console.log('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ping:', error);
        }
      }
    }, 5000); // 5 —Å–µ–∫—É–Ω–¥ - –ø–æ–ª–æ–≤–∏–Ω–∞ –æ—Ç —Ç–∞–π–º–∞—É—Ç–∞ –≤ 10 —Å–µ–∫—É–Ω–¥
  }, []);

  // –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  const scheduleReconnect = useCallback(() => {
    // –ù–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–º
    if (isIntentionalCloseRef.current) {
      return;
    }

    const delay = getReconnectDelay(reconnectAttemptsRef.current);
    console.log(`üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ ${delay}ms (–ø–æ–ø—ã—Ç–∫–∞ ${reconnectAttemptsRef.current + 1})`);

    setConnectionStatus('reconnecting');

    reconnectTimeoutRef.current = setTimeout(() => {
      reconnectAttemptsRef.current += 1;
      connect();
    }, delay);
  }, []);

  const connect = useCallback(() => {
    if (!sessionId || !userId || !userName) {
      console.log('‚ö†Ô∏è WebSocket: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', { sessionId, userId, userName });
      return;
    }

    // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (wsRef.current) {
      isIntentionalCloseRef.current = true;
      wsRef.current.close();
      isIntentionalCloseRef.current = false;
    }

    // –û—á–∏—â–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª
    if (pingIntervalRef.current) {
      clearInterval(pingIntervalRef.current);
      pingIntervalRef.current = null;
    }

    try {
      const wsUrl = process.env.NEXT_PUBLIC_WS_URL || 'ws://localhost:3003';
      console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket:', wsUrl);
      console.log('üìä –û–∫—Ä—É–∂–µ–Ω–∏–µ:', {
        NODE_ENV: process.env.NODE_ENV,
        NEXT_PUBLIC_WS_URL: process.env.NEXT_PUBLIC_WS_URL
      });

      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º WebSocket –≤ production –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ URL
      if (process.env.NODE_ENV === 'production' && !process.env.NEXT_PUBLIC_WS_URL) {
        console.log('‚ö†Ô∏è WebSocket –æ—Ç–∫–ª—é—á–µ–Ω (NEXT_PUBLIC_WS_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)');
        return;
      }

      setConnectionStatus('connecting');

      const ws = new WebSocket(wsUrl);
      wsRef.current = ws;

      ws.onopen = () => {
        console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
        setConnectionStatus('connected');

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        reconnectAttemptsRef.current = 0;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ —Å–µ—Å—Å–∏–∏
        ws.send(JSON.stringify({
          type: 'join',
          sessionId,
          userId,
          userName,
          userAvatar: userAvatar || '',
          userColor: userColor || '#FF6B6B',
        }));

        // –ó–∞–ø—É—Å–∫–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª
        startPingInterval();
      };

      ws.onmessage = (event) => {
        try {
          const message = JSON.parse(event.data);

          switch (message.type) {
            case 'online_users':
              // –ü–æ–ª—É—á–∏–ª–∏ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
              setOnlineUsers(message.users);
              break;

            case 'user_joined':
              // –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è
              setOnlineUsers((prev) => {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if (prev.some((u) => u.userId === message.userId)) {
                  return prev;
                }
                return [
                  ...prev,
                  {
                    userId: message.userId,
                    userName: message.userName,
                    userAvatar: message.userAvatar,
                    userColor: message.userColor,
                  },
                ];
              });
              break;

            case 'user_left':
              // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è
              setOnlineUsers((prev) =>
                prev.filter((u) => u.userId !== message.userId)
              );
              break;

            case 'pong':
              // –û—Ç–≤–µ—Ç –Ω–∞ ping - —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∂–∏–≤–æ
              break;

            default:
              // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
              break;
          }
        } catch (error) {
          // –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞
        }
      };

      ws.onerror = (error) => {
        console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
        console.error('‚ùå WebSocket URL:', wsUrl);
      };

      ws.onclose = (event) => {
        console.log('üîå WebSocket –∑–∞–∫—Ä—ã—Ç:', {
          code: event.code,
          reason: event.reason,
          wasClean: event.wasClean
        });
        setConnectionStatus('disconnected');
        wsRef.current = null;

        // –û—á–∏—â–∞–µ–º ping –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (pingIntervalRef.current) {
          clearInterval(pingIntervalRef.current);
          pingIntervalRef.current = null;
        }

        // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –µ—Å–ª–∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –Ω–µ –±—ã–ª–æ –Ω–∞–º–µ—Ä–µ–Ω–Ω—ã–º
        if (!isIntentionalCloseRef.current) {
          scheduleReconnect();
        }
      };
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è WebSocket:', error);
      setConnectionStatus('disconnected');
      scheduleReconnect();
    }
  }, [sessionId, userId, userName, userAvatar, userColor, startPingInterval, scheduleReconnect]);

  // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    connect();

    // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
      isIntentionalCloseRef.current = true;

      // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç—ã –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã
      if (reconnectTimeoutRef.current) {
        clearTimeout(reconnectTimeoutRef.current);
        reconnectTimeoutRef.current = null;
      }

      if (pingIntervalRef.current) {
        clearInterval(pingIntervalRef.current);
        pingIntervalRef.current = null;
      }

      // –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket
      if (wsRef.current) {
        wsRef.current.close();
        wsRef.current = null;
      }

      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setConnectionStatus('disconnected');
      setOnlineUsers([]);
    };
  }, [connect]);

  return {
    onlineUsers,
    isConnected: connectionStatus === 'connected',
    connectionStatus,
  };
}
