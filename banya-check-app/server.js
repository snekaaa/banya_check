const { createServer } = require('http');
const { parse } = require('url');
const next = require('next');
const WebSocket = require('ws');

const dev = process.env.NODE_ENV !== 'production';
const hostname = '0.0.0.0';
const port = parseInt(process.env.PORT || '3000', 10);

const app = next({ dev, hostname, port });
const handle = app.getRequestHandler();

// WebSocket configuration
const WS_PATH = '/ws';
const PING_TIMEOUT = 10000; // 10 —Å–µ–∫—É–Ω–¥
const PING_CHECK_INTERVAL = 5000; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π: sessionId -> Set of WebSocket clients
const sessionRooms = new Map();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö: client -> {userId, sessionId}
const clientInfo = new WeakMap();

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping: client -> timestamp
const lastPingTime = new Map();

app.prepare().then(() => {
  const server = createServer(async (req, res) => {
    try {
      const parsedUrl = parse(req.url, true);
      await handle(req, res, parsedUrl);
    } catch (err) {
      console.error('Error occurred handling', req.url, err);
      res.statusCode = 500;
      res.end('internal server error');
    }
  });

  // WebSocket Server
  const wss = new WebSocket.Server({
    server,
    path: WS_PATH,
  });

  wss.on('connection', (ws) => {
    console.log('üîå –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ');

    ws.on('message', (message) => {
      try {
        const data = JSON.parse(message);

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "join" - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ —Å–µ—Å—Å–∏–∏
        if (data.type === 'join' && data.sessionId && data.userId) {
          const { sessionId, userId, userName, userAvatar, userColor } = data;

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
          clientInfo.set(ws, { sessionId, userId, userName, userAvatar, userColor });

          // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
          lastPingTime.set(ws, Date.now());

          // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –∫–æ–º–Ω–∞—Ç—É —Å–µ—Å—Å–∏–∏
          if (!sessionRooms.has(sessionId)) {
            sessionRooms.set(sessionId, new Set());
          }
          sessionRooms.get(sessionId).add(ws);

          console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ —Å–µ—Å—Å–∏–∏ ${sessionId}`);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ —Å–æ–±—ã—Ç–∏–µ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          broadcastToSession(sessionId, {
            type: 'user_joined',
            userId,
            userName,
            userAvatar,
            userColor,
          }, ws); // –ò—Å–∫–ª—é—á–∞–µ–º —Å–∞–º–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          const onlineUsers = getOnlineUsersInSession(sessionId);
          ws.send(JSON.stringify({
            type: 'online_users',
            users: onlineUsers,
          }));
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è "ping" –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if (data.type === 'ping') {
          // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
          lastPingTime.set(ws, Date.now());

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º pong —Å —Ç–µ–∫—É—â–∏–º timestamp
          ws.send(JSON.stringify({
            type: 'pong',
            timestamp: Date.now()
          }));
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      }
    });

    ws.on('close', () => {
      const info = clientInfo.get(ws);
      if (info) {
        const { sessionId, userId, userName } = info;
        console.log(`üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) –æ—Ç–∫–ª—é—á–∏–ª—Å—è –æ—Ç —Å–µ—Å—Å–∏–∏ ${sessionId}`);

        // –£–¥–∞–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
        if (sessionRooms.has(sessionId)) {
          sessionRooms.get(sessionId).delete(ws);

          // –ï—Å–ª–∏ –≤ –∫–æ–º–Ω–∞—Ç–µ –Ω–∏–∫–æ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å, —É–¥–∞–ª—è–µ–º –∫–æ–º–Ω–∞—Ç—É
          if (sessionRooms.get(sessionId).size === 0) {
            sessionRooms.delete(sessionId);
          }
        }

        // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
        lastPingTime.delete(ws);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
        broadcastToSession(sessionId, {
          type: 'user_left',
          userId,
          userName,
        });
      }
    });

    ws.on('error', (error) => {
      console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
    });
  });

  /**
   * –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º –≤ —Å–µ—Å—Å–∏–∏
   */
  function broadcastToSession(sessionId, message, excludeClient = null) {
    if (!sessionRooms.has(sessionId)) return;

    const clients = sessionRooms.get(sessionId);
    const messageStr = JSON.stringify(message);

    clients.forEach((client) => {
      if (client !== excludeClient && client.readyState === WebSocket.OPEN) {
        client.send(messageStr);
      }
    });
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–µ—Å—Å–∏–∏
   */
  function getOnlineUsersInSession(sessionId) {
    if (!sessionRooms.has(sessionId)) return [];

    const clients = sessionRooms.get(sessionId);
    const users = [];

    clients.forEach((client) => {
      const info = clientInfo.get(client);
      if (info) {
        users.push({
          userId: info.userId,
          userName: info.userName,
          userAvatar: info.userAvatar,
          userColor: info.userColor,
        });
      }
    });

    return users;
  }

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ timeout –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
  setInterval(() => {
    const now = Date.now();

    // –ü—Ä–æ—Ö–æ–¥–∏–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
    lastPingTime.forEach((lastPing, ws) => {
      const timeSinceLastPing = now - lastPing;

      // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª—å—à–µ PING_TIMEOUT —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
      if (timeSinceLastPing > PING_TIMEOUT) {
        const info = clientInfo.get(ws);
        if (info) {
          const { sessionId, userId, userName } = info;
          console.log(`‚è∞ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} (${userName}) –æ—Ç–∫–ª—é—á—ë–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É (${timeSinceLastPing}ms)`);

          // –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
          if (sessionRooms.has(sessionId)) {
            sessionRooms.get(sessionId).delete(ws);

            if (sessionRooms.get(sessionId).size === 0) {
              sessionRooms.delete(sessionId);
            }
          }

          // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ ping
          lastPingTime.delete(ws);

          // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –≤ –∫–æ–º–Ω–∞—Ç–µ
          broadcastToSession(sessionId, {
            type: 'user_left',
            userId,
            userName,
          });
        }

        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if (ws.readyState === WebSocket.OPEN) {
          ws.close(1000, 'Ping timeout');
        }
      }
    });
  }, PING_CHECK_INTERVAL);

  server.listen(port, (err) => {
    if (err) throw err;
    console.log(`üöÄ Next.js –≥–æ—Ç–æ–≤ –Ω–∞ http://${hostname}:${port}`);
    console.log(`üîå WebSocket —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤ –Ω–∞ ws://${hostname}:${port}${WS_PATH}`);
    console.log(`‚è±Ô∏è  Timeout –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${PING_TIMEOUT}ms`);
    console.log(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∫–∞–∂–¥—ã–µ ${PING_CHECK_INTERVAL}ms`);
  });
});
